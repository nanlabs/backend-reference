// Code generated by mockery v2.16.0. DO NOT EDIT.

package mongo

import (
	mock "github.com/stretchr/testify/mock"
	mongo_drivermongo "go.mongodb.org/mongo-driver/mongo"
)

// MockClientHelper is an autogenerated mock type for the ClientHelper type
type MockClientHelper struct {
	mock.Mock
}

// Connect provides a mock function with given fields:
func (_m *MockClientHelper) Connect() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Database provides a mock function with given fields: _a0
func (_m *MockClientHelper) Database(_a0 string) DatabaseHelper {
	ret := _m.Called(_a0)

	var r0 DatabaseHelper
	if rf, ok := ret.Get(0).(func(string) DatabaseHelper); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(DatabaseHelper)
		}
	}

	return r0
}

// StartSession provides a mock function with given fields:
func (_m *MockClientHelper) StartSession() (mongo_drivermongo.Session, error) {
	ret := _m.Called()

	var r0 mongo_drivermongo.Session
	if rf, ok := ret.Get(0).(func() mongo_drivermongo.Session); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(mongo_drivermongo.Session)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewMockClientHelper interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockClientHelper creates a new instance of MockClientHelper. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockClientHelper(t mockConstructorTestingTNewMockClientHelper) *MockClientHelper {
	mock := &MockClientHelper{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
