// Code generated by mockery v2.16.0. DO NOT EDIT.

package mongo

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockCursorHelper is an autogenerated mock type for the CursorHelper type
type MockCursorHelper struct {
	mock.Mock
}

// Close provides a mock function with given fields: ctx
func (_m *MockCursorHelper) Close(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Decode provides a mock function with given fields: val
func (_m *MockCursorHelper) Decode(val interface{}) error {
	ret := _m.Called(val)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}) error); ok {
		r0 = rf(val)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Err provides a mock function with given fields:
func (_m *MockCursorHelper) Err() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ID provides a mock function with given fields:
func (_m *MockCursorHelper) ID() int64 {
	ret := _m.Called()

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// Next provides a mock function with given fields: ctx
func (_m *MockCursorHelper) Next(ctx context.Context) bool {
	ret := _m.Called(ctx)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context) bool); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// RemainingBatchLength provides a mock function with given fields:
func (_m *MockCursorHelper) RemainingBatchLength() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// TryNext provides a mock function with given fields: ctx
func (_m *MockCursorHelper) TryNext(ctx context.Context) bool {
	ret := _m.Called(ctx)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context) bool); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

type mockConstructorTestingTNewMockCursorHelper interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockCursorHelper creates a new instance of MockCursorHelper. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockCursorHelper(t mockConstructorTestingTNewMockCursorHelper) *MockCursorHelper {
	mock := &MockCursorHelper{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
